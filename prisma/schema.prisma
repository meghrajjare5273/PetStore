// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String     @id @default(cuid())
  name      String
  address   String?
  phoneNo   String // Changed from Int to String for flexibility
  email     String
  createdAt DateTime   @default(now())
  purchases Purchase[]
}

model Pet {
  id          String    @id @default(cuid())
  type        String // e.g., "Dog", "Cat"
  breed       String
  age         Int
  price       Float
  description String?
  imageUrl    String?
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])
  purchaseId  String? // Nullable; set when sold
}

model Product {
  id               String            @id @default(cuid())
  name             String
  category         String // e.g., "Food", "Toys"
  price            Float
  description      String?
  imageUrl         String?
  stockQuantity    Int
  productPurchases ProductPurchase[]
}

model Purchase {
  id               String            @id @default(cuid())
  customer         Customer          @relation(fields: [customerId], references: [id])
  customerId       String
  pets             Pet[] // Many-to-many with Pet
  productPurchases ProductPurchase[] // Links to products purchased
  mode             String // e.g., "cash"
  date             DateTime          @default(now())
}

model ProductPurchase {
  id         String   @id @default(cuid())
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  quantity   Int
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
